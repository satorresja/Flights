{"version":3,"file":"slimscroll.directive.d.ts","sources":["slimscroll.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ViewContainerRef, OnChanges, OnDestroy, OnInit, Renderer2, EventEmitter, SimpleChanges } from '@angular/core';\nimport { SlimScrollOptions, ISlimScrollOptions } from '../classes/slimscroll-options.class';\nimport { ISlimScrollEvent, SlimScrollEvent } from '../classes/slimscroll-event.class';\nimport { ISlimScrollState } from '../classes/slimscroll-state.class';\nimport { Subscription } from 'rxjs';\nexport declare const easing: {\n    [key: string]: Function;\n};\nexport declare class SlimScrollDirective implements OnInit, OnChanges, OnDestroy {\n    private viewContainer;\n    private renderer;\n    private document;\n    private optionsDefaults;\n    enabled: boolean;\n    options: SlimScrollOptions;\n    scrollEvents: EventEmitter<ISlimScrollEvent>;\n    scrollChanged: EventEmitter<ISlimScrollState>;\n    barVisibilityChange: EventEmitter<boolean>;\n    el: HTMLElement;\n    wrapper: HTMLElement;\n    grid: HTMLElement;\n    bar: HTMLElement;\n    body: HTMLElement;\n    pageY: number;\n    top: number;\n    dragging: boolean;\n    mutationThrottleTimeout: number;\n    mutationObserver: MutationObserver;\n    lastTouchPositionY: number;\n    visibleTimeout: any;\n    interactionSubscriptions: Subscription;\n    constructor(viewContainer: ViewContainerRef, renderer: Renderer2, document: any, optionsDefaults: ISlimScrollOptions);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    setup(): void;\n    handleEvent(e: SlimScrollEvent): void;\n    setStyle(): void;\n    onMutation(): void;\n    wrapContainer(): void;\n    initGrid(): void;\n    initBar(): void;\n    getBarHeight(): void;\n    scrollTo(y: number, duration: number, easingFunc: string): void;\n    scrollContent(y: number, isWheel: boolean, isJump: boolean): null | number;\n    initWheel: () => void;\n    initDrag: () => void;\n    showBarAndGrid(): void;\n    hideBarAndGrid(): void;\n    preventDefaultEvent: (e: MouseEvent) => void;\n    destroy(): void;\n    unwrap(wrapper: HTMLElement): void;\n    onResize($event: any): void;\n}\n"]}